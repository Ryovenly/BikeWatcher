#pragma checksum "C:\Users\steve\Desktop\Cours\B2\.net\TP\BikeWatcher\BikeWatcher\Views\Home\Map.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8f637ed7e59493e541cda6f8b01762ff230feb61"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Map), @"mvc.1.0.view", @"/Views/Home/Map.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\steve\Desktop\Cours\B2\.net\TP\BikeWatcher\BikeWatcher\Views\_ViewImports.cshtml"
using BikeWatcher;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\steve\Desktop\Cours\B2\.net\TP\BikeWatcher\BikeWatcher\Views\_ViewImports.cshtml"
using BikeWatcher.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8f637ed7e59493e541cda6f8b01762ff230feb61", @"/Views/Home/Map.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dc248117db282b465f40e0ead4be2db98717bf82", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Map : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\steve\Desktop\Cours\B2\.net\TP\BikeWatcher\BikeWatcher\Views\Home\Map.cshtml"
  
    ViewData["Title"] = "Map";
    var villes = ViewBag.AllStation;

#line default
#line hidden
#nullable disable
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8f637ed7e59493e541cda6f8b01762ff230feb613531", async() => {
                WriteLiteral(@"
    <meta charset=""utf-8"">
    <!-- Nous chargeons les fichiers CDN de Leaflet. Le CSS AVANT le JS -->
    <link rel=""stylesheet"" href=""https://unpkg.com/leaflet@1.3.1/dist/leaflet.css"" integrity=""sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==""");
                BeginWriteAttribute("crossorigin", " crossorigin=\"", 407, "\"", 421, 0);
                EndWriteAttribute();
                WriteLiteral(" />\r\n    <style type=\"text/css\">\r\n        #map { /* la carte DOIT avoir une hauteur sinon elle n\'apparaît pas */\r\n            height: 500px;\r\n        }\r\n    </style>\r\n    <title>Carte</title>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8f637ed7e59493e541cda6f8b01762ff230feb615173", async() => {
                WriteLiteral(@"

    <h1>Map</h1>

    <div id=""map"">
        <!-- Ici s'affichera la carte -->
    </div>

    <!-- Fichiers Javascript -->
    <script src=""https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"" integrity=""sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==""");
                BeginWriteAttribute("crossorigin", " crossorigin=\"", 938, "\"", 952, 0);
                EndWriteAttribute();
                WriteLiteral(@"></script>
    <script type=""text/javascript"">


function geoloc(){ // ou tout autre nom de fonction
    var geoSuccess = function(position) { // Ceci s'exécutera si l'utilisateur accepte la géolocalisation
        startPos = position;
        lat = startPos.coords.latitude;
        lon = startPos.coords.longitude;
        console.log(""lat: ""+lat+"" - lon: ""+lon);
    };
    var geoFail = function(){ // Ceci s'exécutera si l'utilisateur refuse la géolocalisation
        console.log(""refus"");
    };
    // La ligne ci-dessous cherche la position de l'utilisateur et déclenchera la demande d'accord
    navigator.geolocation.getCurrentPosition(geoSuccess,geoFail);
}

        var lat = 45.75; //Lyon
        var lon = 4.85;


        var macarte = null;
        var stations = {");
#nullable restore
#line 51 "C:\Users\steve\Desktop\Cours\B2\.net\TP\BikeWatcher\BikeWatcher\Views\Home\Map.cshtml"
                         foreach (var Station in villes) {
                

#line default
#line hidden
#nullable disable
                WriteLiteral("\"");
#nullable restore
#line 52 "C:\Users\steve\Desktop\Cours\B2\.net\TP\BikeWatcher\BikeWatcher\Views\Home\Map.cshtml"
                  Write(Station.name);

#line default
#line hidden
#nullable disable
                WriteLiteral("\": { \"lat\": ");
#nullable restore
#line 52 "C:\Users\steve\Desktop\Cours\B2\.net\TP\BikeWatcher\BikeWatcher\Views\Home\Map.cshtml"
                                           Write(Station.lat);

#line default
#line hidden
#nullable disable
                WriteLiteral(", \"lon\":");
#nullable restore
#line 52 "C:\Users\steve\Desktop\Cours\B2\.net\TP\BikeWatcher\BikeWatcher\Views\Home\Map.cshtml"
                                                               Write(Station.lng);

#line default
#line hidden
#nullable disable
                WriteLiteral(", \"bike\": \"");
#nullable restore
#line 52 "C:\Users\steve\Desktop\Cours\B2\.net\TP\BikeWatcher\BikeWatcher\Views\Home\Map.cshtml"
                                                                                      Write(Station.available_bike_stands);

#line default
#line hidden
#nullable disable
                WriteLiteral("\", \"place\": \"");
#nullable restore
#line 52 "C:\Users\steve\Desktop\Cours\B2\.net\TP\BikeWatcher\BikeWatcher\Views\Home\Map.cshtml"
                                                                                                                                 Write(Station.bike_stands);

#line default
#line hidden
#nullable disable
                WriteLiteral("\"},\r\n                ");
#nullable restore
#line 53 "C:\Users\steve\Desktop\Cours\B2\.net\TP\BikeWatcher\BikeWatcher\Views\Home\Map.cshtml"
                        }

#line default
#line hidden
#nullable disable
                WriteLiteral(@"        };



                // Fonction d'initialisation de la carte
        function initMap() {
            // Créer l'objet ""macarte"" et l'insèrer dans l'élément HTML qui a l'ID ""map""
            macarte = L.map('map').setView([lat, lon], 11);
            // Leaflet ne récupère pas les cartes (tiles) sur un serveur par défaut. Nous devons lui préciser où nous souhaitons les récupérer. Ici, openstreetmap.fr
            L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
                // Il est toujours bien de laisser le lien vers la source des données
                attribution: 'données © OpenStreetMap/ODbL - rendu OSM France',
                minZoom: 1,
                maxZoom: 20


            }).addTo(macarte);

	for (station in stations) {
        var marker = L.marker([stations[station].lat, stations[station].lon]).addTo(macarte);
        marker.bindPopup(""<b>Place : </b>"" + station + ""<br>"" + ""<b>Nombre de vélo dispo : </b>"" + stations[station].bike + """);
                WriteLiteral(@"<br>"" + ""<b>Nombre de place disponible pour les vélos : </b>"" + stations[station].place)
	}     
        }
        window.onload = function(){
            // Fonction d'initialisation qui s'exécute lorsque le DOM est chargé
            initMap();
        };
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
